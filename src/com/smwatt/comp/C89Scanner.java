/* The following code was generated by JFlex 1.4.3 on 12/6/10 12:22 AM */

//////////////////////////////////////////////////////////////////////////////
//
// C89Scanner.lex
//
//////////////////////////////////////////////////////////////////////////////
// Copyright 2005 Stephen M. Watt

package com.smwatt.comp;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/6/10 12:22 AM from the specification file
 * <tt>/Users/petergoodman/Code/CCompiler2/src/com/smwatt/comp/C89Scanner.lex</tt>
 */
public class C89Scanner implements CScanner, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CHAR_LITERAL = 4;
  public static final int YYINITIAL = 0;
  public static final int STRING_LITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\17\1\0\1\22\1\51\22\0\1\22\1\63\1\47"+
    "\1\100\1\0\1\65\1\67\1\50\1\55\1\56\1\21\1\71\1\74"+
    "\1\5\1\54\1\20\1\52\7\15\2\1\1\76\1\75\1\72\1\64"+
    "\1\73\1\77\1\0\4\3\1\4\1\7\5\2\1\11\10\2\1\13"+
    "\2\2\1\53\2\2\1\57\1\14\1\60\1\66\1\2\1\0\1\24"+
    "\1\27\1\33\1\40\1\31\1\6\1\42\1\35\1\37\1\2\1\32"+
    "\1\10\1\41\1\36\1\26\1\46\1\2\1\30\1\34\1\25\1\12"+
    "\1\23\1\44\1\16\1\45\1\43\1\61\1\70\1\62\1\101\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\3\3\1\5\1\6"+
    "\1\7\1\5\13\3\1\10\1\11\1\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\41"+
    "\1\40\1\0\1\2\1\43\1\44\1\45\1\46\4\3"+
    "\1\0\1\47\1\50\17\3\1\51\1\3\1\52\3\3"+
    "\2\0\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\3\72\1\43\1\0\1\43\1\3\1\73\3\3\1\0"+
    "\23\3\1\74\4\3\1\2\1\75\1\76\1\77\1\72"+
    "\1\3\1\100\3\3\1\101\1\102\4\3\1\103\1\3"+
    "\1\104\1\105\2\3\1\106\10\3\1\107\1\3\1\110"+
    "\1\3\1\111\2\3\1\112\4\3\1\113\2\3\1\114"+
    "\5\3\1\115\3\3\1\116\1\3\1\117\1\3\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\3\3\1\126\2\3"+
    "\1\127\1\130\1\131\1\132\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\306\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\306\0\306\0\u0630\0\u0672\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc"+
    "\0\u07fe\0\u0840\0\u0882\0\u08c4\0\306\0\306\0\306\0\306"+
    "\0\u0906\0\306\0\u0948\0\u098a\0\306\0\306\0\u09cc\0\u0a0e"+
    "\0\u0a50\0\u0a92\0\306\0\306\0\306\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\306\0\306\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4"+
    "\0\u0f36\0\u0f78\0\u0fba\0\u014a\0\u0ffc\0\u103e\0\u1080\0\u10c2"+
    "\0\u1104\0\u1146\0\u1188\0\306\0\306\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\306\0\306\0\u11ca\0\306"+
    "\0\u120c\0\306\0\306\0\u124e\0\u1290\0\u12d2\0\u1314\0\306"+
    "\0\u1356\0\u014a\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2"+
    "\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902"+
    "\0\u1944\0\u014a\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\306"+
    "\0\306\0\306\0\u1ad0\0\u1b12\0\u014a\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u014a\0\u014a\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u014a\0\u1d22"+
    "\0\u014a\0\u014a\0\u1d64\0\u1da6\0\u014a\0\u1de8\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u014a\0\u1ff8\0\u014a"+
    "\0\u203a\0\u014a\0\u207c\0\u20be\0\u014a\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u014a\0\u2208\0\u224a\0\u014a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u014a\0\u23d6\0\u2418\0\u245a\0\u014a\0\u249c"+
    "\0\u014a\0\u24de\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u2520\0\u2562\0\u25a4\0\u014a\0\u25e6\0\u2628\0\u014a\0\u014a"+
    "\0\u014a\0\u014a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\3\6\1\7\1\10\1\6\1\11\1\6"+
    "\1\12\1\6\1\4\1\5\1\6\1\13\1\14\1\15"+
    "\1\13\1\16\1\17\1\20\1\6\1\21\1\22\1\23"+
    "\1\6\1\24\1\25\2\6\1\26\1\27\1\6\1\30"+
    "\1\6\1\31\2\6\1\32\1\33\1\13\1\34\1\6"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\14\63\1\64"+
    "\2\63\1\0\27\63\1\65\1\63\1\66\30\63\14\67"+
    "\1\64\2\67\1\0\30\67\1\65\1\66\30\67\103\0"+
    "\1\5\2\0\1\70\3\0\4\71\1\0\1\5\13\0"+
    "\1\70\20\0\1\5\1\0\1\72\26\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\24\6\3\0\2\6\33\0"+
    "\1\73\56\0\1\74\6\0\1\75\7\0\4\6\1\0"+
    "\2\6\1\76\3\6\1\0\2\6\4\0\3\6\1\77"+
    "\20\6\3\0\2\6\27\0\4\6\1\0\6\6\1\0"+
    "\2\6\4\0\3\6\1\100\20\6\3\0\2\6\27\0"+
    "\4\6\1\0\6\6\1\0\2\6\4\0\13\6\1\101"+
    "\10\6\3\0\2\6\47\0\1\102\42\0\1\103\101\0"+
    "\1\104\16\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\3\6\1\105\20\6\3\0\2\6\27\0\4\6\1\0"+
    "\4\6\1\106\1\6\1\0\2\6\4\0\24\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\22\6\1\107\1\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\5\6\1\110\16\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\6\6\1\111\15\6\3\0\2\6\27\0\4\6\1\0"+
    "\2\6\1\112\3\6\1\0\1\6\1\113\4\0\13\6"+
    "\1\114\10\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\1\6\1\115\1\6\1\116\6\6"+
    "\1\117\11\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\2\6\1\120\7\6\1\121\1\6"+
    "\1\122\4\6\1\123\2\6\3\0\2\6\27\0\4\6"+
    "\1\0\1\124\5\6\1\0\2\6\4\0\13\6\1\125"+
    "\10\6\3\0\2\6\27\0\4\6\1\0\6\6\1\0"+
    "\2\6\4\0\3\6\1\126\2\6\1\127\15\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\3\6\1\130\20\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\12\6\1\131\11\6\3\0"+
    "\2\6\27\0\1\5\2\0\1\70\3\0\4\71\1\0"+
    "\1\5\1\132\12\0\1\70\20\0\1\5\1\132\1\72"+
    "\26\0\1\72\13\0\1\72\34\0\1\72\1\0\1\133"+
    "\111\0\1\134\101\0\1\135\101\0\1\136\101\0\1\137"+
    "\101\0\1\140\2\0\1\141\76\0\1\142\3\0\1\143"+
    "\75\0\1\144\4\0\1\145\74\0\1\146\5\0\1\147"+
    "\73\0\1\150\6\0\1\151\106\0\1\152\1\0\14\63"+
    "\1\0\2\63\1\0\27\63\1\0\1\63\1\0\30\63"+
    "\15\153\1\154\1\155\1\0\32\153\1\154\27\153\14\67"+
    "\1\0\2\67\1\0\30\67\2\0\30\67\1\0\1\156"+
    "\3\0\1\157\7\0\1\156\34\0\1\156\16\0\1\157"+
    "\20\0\4\71\67\0\1\72\2\0\1\70\1\0\4\160"+
    "\3\0\1\72\13\0\1\70\20\0\1\72\30\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\3\6\1\161\20\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\5\6\1\162\16\6\3\0\2\6\27\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\13\6\1\163\10\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\11\6\1\164\2\6\1\165\7\6\3\0\2\6"+
    "\26\0\21\102\1\166\60\102\1\0\4\6\1\0\2\6"+
    "\1\167\3\6\1\0\2\6\4\0\14\6\1\170\7\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\2\6\1\171\21\6\3\0\2\6\27\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\23\6\1\172\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\6\6\1\173\15\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\2\6\1\174\14\6\1\175"+
    "\4\6\3\0\2\6\27\0\4\6\1\0\6\6\1\0"+
    "\2\6\4\0\11\6\1\176\12\6\3\0\2\6\27\0"+
    "\4\6\1\0\6\6\1\0\2\6\4\0\2\6\1\177"+
    "\21\6\3\0\2\6\27\0\4\6\1\0\4\6\1\200"+
    "\1\6\1\0\2\6\4\0\24\6\3\0\2\6\27\0"+
    "\4\6\1\0\6\6\1\0\2\6\4\0\11\6\1\201"+
    "\12\6\3\0\2\6\27\0\4\6\1\0\6\6\1\0"+
    "\2\6\4\0\13\6\1\202\10\6\3\0\2\6\27\0"+
    "\4\6\1\0\6\6\1\0\2\6\4\0\1\6\1\203"+
    "\22\6\3\0\2\6\27\0\4\6\1\0\6\6\1\0"+
    "\2\6\4\0\1\6\1\204\3\6\1\205\16\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\3\6\1\206\20\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\17\6\1\207\1\210\3\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\14\6\1\211\7\6\3\0\2\6\27\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\2\6\1\212\21\6"+
    "\3\0\2\6\27\0\4\6\1\0\4\6\1\213\1\6"+
    "\1\0\2\6\4\0\24\6\3\0\2\6\27\0\4\6"+
    "\1\0\1\214\5\6\1\0\2\6\4\0\24\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\2\6\1\215\21\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\14\6\1\216\7\6\3\0"+
    "\2\6\27\0\1\217\1\0\2\217\1\0\2\217\5\0"+
    "\1\217\6\0\1\217\2\0\1\217\1\0\1\217\1\0"+
    "\1\217\4\0\1\217\11\0\1\217\103\0\1\220\111\0"+
    "\1\221\101\0\1\222\32\0\1\223\34\0\1\223\30\0"+
    "\1\155\1\0\2\155\1\0\2\155\5\0\1\155\6\0"+
    "\1\155\2\0\1\155\1\0\1\155\1\0\1\155\4\0"+
    "\1\155\11\0\1\155\30\0\1\156\4\0\4\160\3\0"+
    "\1\156\34\0\1\156\30\0\1\156\13\0\1\156\34\0"+
    "\1\156\30\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\1\6\1\224\22\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\17\6\1\225\4\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\14\6\1\226\7\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\3\6\1\227\20\6\3\0"+
    "\2\6\26\0\20\102\1\13\1\166\60\102\1\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\1\6\1\230\22\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\15\6\1\231\6\6\3\0\2\6\27\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\3\6\1\232\20\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\6\6\1\233\15\6\3\0\2\6\27\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\1\6\1\234\22\6"+
    "\3\0\2\6\27\0\4\6\1\0\4\6\1\235\1\6"+
    "\1\0\2\6\4\0\24\6\3\0\2\6\27\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\14\6\1\236\7\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\6\6\1\237\15\6\3\0\2\6\27\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\6\6\1\240\15\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\16\6\1\241\5\6\3\0\2\6\27\0\4\6"+
    "\1\0\6\6\1\0\2\6\4\0\6\6\1\242\15\6"+
    "\3\0\2\6\27\0\4\6\1\0\6\6\1\0\2\6"+
    "\4\0\2\6\1\243\6\6\1\244\12\6\3\0\2\6"+
    "\27\0\4\6\1\0\6\6\1\0\2\6\4\0\5\6"+
    "\1\245\16\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\2\6\1\246\21\6\3\0\2\6"+
    "\27\0\4\6\1\0\4\6\1\247\1\6\1\0\2\6"+
    "\4\0\24\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\5\6\1\250\16\6\3\0\2\6"+
    "\27\0\4\6\1\0\6\6\1\0\2\6\4\0\13\6"+
    "\1\251\10\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\6\6\1\252\15\6\3\0\2\6"+
    "\27\0\4\6\1\0\6\6\1\0\2\6\4\0\2\6"+
    "\1\253\21\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\4\6\1\254\17\6\3\0\2\6"+
    "\27\0\4\6\1\0\6\6\1\0\2\6\4\0\1\6"+
    "\1\255\22\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\3\6\1\256\20\6\3\0\2\6"+
    "\27\0\4\6\1\0\2\6\1\257\3\6\1\0\2\6"+
    "\4\0\24\6\3\0\2\6\27\0\1\217\1\0\2\217"+
    "\1\0\2\217\4\71\1\0\1\217\6\0\1\217\2\0"+
    "\1\217\1\0\1\217\1\0\1\217\4\0\1\217\11\0"+
    "\1\217\44\0\1\153\34\0\1\153\30\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\2\6\1\260\21\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\17\6\1\261\4\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\13\6\1\262\10\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\2\6\1\263\21\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\15\6\1\264\6\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\7\6\1\265\14\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\5\6\1\266\16\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\11\6\1\267\12\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\5\6\1\270\16\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\14\6\1\271\7\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\2\6\1\272\21\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\14\6\1\273\7\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\10\6\1\274\13\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\2\6\1\275\21\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\6\6\1\276\15\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\3\6\1\277\20\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\10\6\1\300\13\6\3\0"+
    "\2\6\27\0\4\6\1\0\2\6\1\301\3\6\1\0"+
    "\2\6\4\0\24\6\3\0\2\6\27\0\4\6\1\0"+
    "\4\6\1\302\1\6\1\0\2\6\4\0\24\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\6\6\1\303\15\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\13\6\1\304\10\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\14\6\1\305\7\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\6\6\1\306\15\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\13\6\1\307\10\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\2\6\1\310\21\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\13\6\1\311\10\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\13\6\1\312\10\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\10\6\1\313\13\6\3\0\2\6\27\0\4\6\1\0"+
    "\6\6\1\0\2\6\4\0\2\6\1\314\21\6\3\0"+
    "\2\6\27\0\4\6\1\0\6\6\1\0\2\6\4\0"+
    "\15\6\1\315\6\6\3\0\2\6\27\0\4\6\1\0"+
    "\1\316\5\6\1\0\2\6\4\0\24\6\3\0\2\6"+
    "\27\0\4\6\1\0\6\6\1\0\2\6\4\0\12\6"+
    "\1\317\11\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\6\6\1\320\15\6\3\0\2\6"+
    "\27\0\4\6\1\0\2\6\1\321\3\6\1\0\2\6"+
    "\4\0\24\6\3\0\2\6\27\0\4\6\1\0\6\6"+
    "\1\0\2\6\4\0\6\6\1\322\15\6\3\0\2\6"+
    "\27\0\4\6\1\0\2\6\1\323\3\6\1\0\2\6"+
    "\4\0\24\6\3\0\2\6\27\0\4\6\1\0\1\324"+
    "\5\6\1\0\2\6\4\0\24\6\3\0\2\6\27\0"+
    "\4\6\1\0\6\6\1\0\2\6\4\0\6\6\1\325"+
    "\15\6\3\0\2\6\27\0\4\6\1\0\4\6\1\326"+
    "\1\6\1\0\2\6\4\0\24\6\3\0\2\6\27\0"+
    "\4\6\1\0\6\6\1\0\2\6\4\0\2\6\1\327"+
    "\21\6\3\0\2\6\27\0\4\6\1\0\6\6\1\0"+
    "\2\6\4\0\15\6\1\330\6\6\3\0\2\6\27\0"+
    "\4\6\1\0\6\6\1\0\2\6\4\0\6\6\1\331"+
    "\15\6\3\0\2\6\27\0\4\6\1\0\6\6\1\0"+
    "\2\6\4\0\5\6\1\332\16\6\3\0\2\6\27\0"+
    "\4\6\1\0\6\6\1\0\2\6\4\0\6\6\1\333"+
    "\15\6\3\0\2\6\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9834];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\1\11\16\1\2\11\2\1\6\11"+
    "\11\1\4\11\1\1\1\11\2\1\2\11\1\1\1\0"+
    "\2\1\3\11\4\1\1\0\2\11\25\1\2\0\13\11"+
    "\1\1\1\11\1\1\2\11\3\1\1\0\1\11\5\1"+
    "\1\0\31\1\3\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  //-- The caller can tell us the filename.
  private String _fname = "-- Unknown File --";
  public void setFilename(String s) {
    _fname = s;
  }
  public String getFilename() {
    return _fname;
  }
  //-- The parser sets a "CTypedefOracle"
  private CTypedefOracle _tdoracle = null;
  
  public void setTypedefOracle(CTypedefOracle tdoracle) { 
  	_tdoracle = tdoracle; 
  }
  public CTypedefOracle getTypedefOracle() {
  	return _tdoracle;
  }
  private boolean isTypedefName(String s) {
  	return _tdoracle != null && _tdoracle.isTypedefName(s);
  }
  
  //-- These are used to make the symbols for the parser.
  private Symbol token(int type) {
    return new Symbol(type, yyline, yycolumn, new CToken(type, _fname, yyline, yycolumn));
  }
  private Symbol string(int type, String value) {
    return new Symbol(type, yyline, yycolumn, new CToken(type, _fname, yyline, yycolumn, value));
  }
  private Symbol specifier(int type) {
    return new Symbol(type, yyline, yycolumn, new CTokenSpecifier(type, _fname, yyline, yycolumn));
  }
  private Symbol operator(int type) {
    return new Symbol(type, yyline, yycolumn, new CTokenOperator(type, _fname, yyline, yycolumn));
  }

    // buffer to store string and character literals as they are being
    // built
    StringBuffer buff = new StringBuffer();
    
    // used for string/character literals
    int next_token_type;
  
    /**
     * Add in an escaped character into a character literal or string
     * literal.
     */
    private boolean addEscapedCharToBuff(String text) {
        switch(text.charAt(1)) {
            case 'n': buff.append('\n'); break;
            case 't': buff.append('\t'); break;
            case 'v': buff.append((char) 11); break;
            case 'b': buff.append('\b'); break;
            case 'r': buff.append('\r'); break;
            case 'f': buff.append('\f'); break;
            case 'a': buff.append((char) 7); break;
            case '\\': buff.append('\\'); break;
            case '?': buff.append('?'); break;
            case '\'': buff.append('\''); break;
            case '"': buff.append('"'); break;
            
            // hex
            case 'x':
                buff.append((char) Integer.parseInt(text.substring(2), 16));
                break;
            
            // octal
            case '0': case '1': case '2': case '3': 
            case '4': case '5': case '6': case '7':
                buff.append((char) Integer.parseInt(text.substring(1), 8));
                break;
            
            // error
            default:
                next_token_type = CTokenType.error; /* TODO */
                buff.append('\0');
                /* TODO */ 
                return false;
        }
        return true;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  C89Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public C89Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 76: 
          { return specifier(CTokenType.SHORT);
          }
        case 92: break;
        case 30: 
          { return token    (CTokenType.POUND);
          }
        case 93: break;
        case 66: 
          { return specifier(CTokenType.AUTO);
          }
        case 94: break;
        case 17: 
          { return operator (CTokenType.NOT);
          }
        case 95: break;
        case 29: 
          { return operator (CTokenType.QMARK);
          }
        case 96: break;
        case 68: 
          { return token    (CTokenType.ENUM);
          }
        case 97: break;
        case 59: 
          { return token    (CTokenType.FOR);
          }
        case 98: break;
        case 75: 
          { return specifier(CTokenType.CONST);
          }
        case 99: break;
        case 36: 
          { return operator (CTokenType.MINUS_MINUS);
          }
        case 100: break;
        case 71: 
          { return token    (CTokenType.GOTO);
          }
        case 101: break;
        case 15: 
          { return token    (CTokenType.O_BRACE);
          }
        case 102: break;
        case 62: 
          { return operator (CTokenType.LSH_ASSIGN);
          }
        case 103: break;
        case 8: 
          { buff.setLength(0);
              next_token_type = CTokenType.STRING; 
              yybegin(STRING_LITERAL);
          }
        case 104: break;
        case 61: 
          { return token    (CTokenType.DOT_DOT_DOT);
          }
        case 105: break;
        case 70: 
          { return specifier(CTokenType.CHAR);
          }
        case 106: break;
        case 25: 
          { return operator (CTokenType.GT);
          }
        case 107: break;
        case 49: 
          { return operator (CTokenType.VBAR_ASSIGN);
          }
        case 108: break;
        case 40: 
          { return operator (CTokenType.STAR_ASSIGN);
          }
        case 109: break;
        case 20: 
          { return operator (CTokenType.XOR);
          }
        case 110: break;
        case 32: 
          { buff.append( yytext() );
          }
        case 111: break;
        case 2: 
          { return string   (CTokenType.INTEGER_CONSTANT, yytext());
          }
        case 112: break;
        case 14: 
          { return token    (CTokenType.C_BRACK);
          }
        case 113: break;
        case 39: 
          { return operator (CTokenType.SLASH_ASSIGN);
          }
        case 114: break;
        case 84: 
          { return token    (CTokenType.SWITCH);
          }
        case 115: break;
        case 48: 
          { return operator (CTokenType.AMP_AMP);
          }
        case 116: break;
        case 52: 
          { return operator (CTokenType.PLUS_PLUS);
          }
        case 117: break;
        case 24: 
          { return operator (CTokenType.LT);
          }
        case 118: break;
        case 41: 
          { return token    (CTokenType.IF);
          }
        case 119: break;
        case 90: 
          { return specifier(CTokenType.REGISTER);
          }
        case 120: break;
        case 82: 
          { return specifier(CTokenType.SIGNED);
          }
        case 121: break;
        case 44: 
          { return operator (CTokenType.EQUALS);
          }
        case 122: break;
        case 3: 
          { if (isTypedefName(yytext()))
    								return string (CTokenType.TYPEDEF_NAME, yytext());
    							  else
    								return string (CTokenType.IDENTIFIER, yytext());
          }
        case 123: break;
        case 80: 
          { return specifier(CTokenType.STATIC);
          }
        case 124: break;
        case 18: 
          { return operator (CTokenType.ASSIGN);
          }
        case 125: break;
        case 65: 
          { return specifier(CTokenType.VOID);
          }
        case 126: break;
        case 69: 
          { return token    (CTokenType.CASE);
          }
        case 127: break;
        case 23: 
          { return operator (CTokenType.PLUS);
          }
        case 128: break;
        case 47: 
          { return operator (CTokenType.AMP_ASSIGN);
          }
        case 129: break;
        case 72: 
          { return specifier(CTokenType.FLOAT);
          }
        case 130: break;
        case 74: 
          { return token    (CTokenType.BREAK);
          }
        case 131: break;
        case 43: 
          { return operator (CTokenType.NOT_EQUALS);
          }
        case 132: break;
        case 51: 
          { return operator (CTokenType.PLUS_ASSIGN);
          }
        case 133: break;
        case 16: 
          { return token    (CTokenType.C_BRACE);
          }
        case 134: break;
        case 87: 
          { return token    (CTokenType.DEFAULT);
          }
        case 135: break;
        case 88: 
          { return specifier(CTokenType.UNSIGNED);
          }
        case 136: break;
        case 57: 
          { return token    (CTokenType.POUND_POUND);
          }
        case 137: break;
        case 60: 
          { return specifier(CTokenType.INT);
          }
        case 138: break;
        case 91: 
          { return token    (CTokenType.CONTINUE);
          }
        case 139: break;
        case 35: 
          { return string   (CTokenType.FLOATING_CONSTANT, yytext());
          }
        case 140: break;
        case 21: 
          { return operator (CTokenType.AMP);
          }
        case 141: break;
        case 4: 
          { return operator (CTokenType.MINUS);
          }
        case 142: break;
        case 11: 
          { return token    (CTokenType.O_PAREN);
          }
        case 143: break;
        case 63: 
          { return operator (CTokenType.RSH_ASSIGN);
          }
        case 144: break;
        case 33: 
          { next_token_type = CTokenType.ERROR; /* TODO */
          }
        case 145: break;
        case 67: 
          { return token    (CTokenType.ELSE);
          }
        case 146: break;
        case 6: 
          { return operator (CTokenType.SLASH);
          }
        case 147: break;
        case 31: 
          { return operator (CTokenType.TILDE);
          }
        case 148: break;
        case 28: 
          { return token    (CTokenType.COLON);
          }
        case 149: break;
        case 83: 
          { return token    (CTokenType.SIZEOF);
          }
        case 150: break;
        case 89: 
          { return specifier(CTokenType.VOLATILE);
          }
        case 151: break;
        case 46: 
          { return operator (CTokenType.XOR_ASSIGN);
          }
        case 152: break;
        case 19: 
          { return operator (CTokenType.MOD);
          }
        case 153: break;
        case 86: 
          { return specifier(CTokenType.TYPEDEF);
          }
        case 154: break;
        case 55: 
          { return operator (CTokenType.GT_EQ);
          }
        case 155: break;
        case 9: 
          { buff.setLength(0);
              next_token_type = CTokenType.CHARACTER_CONSTANT; 
              yybegin(CHAR_LITERAL);
          }
        case 156: break;
        case 34: 
          { yybegin(YYINITIAL); 
                      return string(next_token_type, buff.toString());
          }
        case 157: break;
        case 1: 
          { return string   (CTokenType.ERROR, yytext());
          }
        case 158: break;
        case 45: 
          { return operator (CTokenType.MOD_ASSIGN);
          }
        case 159: break;
        case 22: 
          { return operator (CTokenType.VBAR);
          }
        case 160: break;
        case 56: 
          { return operator (CTokenType.RSH);
          }
        case 161: break;
        case 27: 
          { return token    (CTokenType.SEMI);
          }
        case 162: break;
        case 78: 
          { return token    (CTokenType.RETURN);
          }
        case 163: break;
        case 81: 
          { return token    (CTokenType.STRUCT);
          }
        case 164: break;
        case 85: 
          { return specifier(CTokenType.DOUBLE);
          }
        case 165: break;
        case 77: 
          { return token    (CTokenType.WHILE);
          }
        case 166: break;
        case 38: 
          { return operator (CTokenType.POINTS_TO);
          }
        case 167: break;
        case 26: 
          { return operator (CTokenType.COMMA);
          }
        case 168: break;
        case 5: 
          { /* Ignore */
          }
        case 169: break;
        case 37: 
          { return operator (CTokenType.MINUS_ASSIGN);
          }
        case 170: break;
        case 53: 
          { return operator (CTokenType.LT_EQ);
          }
        case 171: break;
        case 58: 
          { addEscapedCharToBuff(yytext());
          }
        case 172: break;
        case 12: 
          { return token    (CTokenType.C_PAREN);
          }
        case 173: break;
        case 79: 
          { return specifier(CTokenType.EXTERN);
          }
        case 174: break;
        case 50: 
          { return operator (CTokenType.VBAR_VBAR);
          }
        case 175: break;
        case 54: 
          { return operator (CTokenType.LSH);
          }
        case 176: break;
        case 7: 
          { return operator (CTokenType.STAR);
          }
        case 177: break;
        case 10: 
          { return operator (CTokenType.DOT);
          }
        case 178: break;
        case 42: 
          { return token    (CTokenType.DO);
          }
        case 179: break;
        case 13: 
          { return token    (CTokenType.O_BRACK);
          }
        case 180: break;
        case 73: 
          { return token    (CTokenType.UNION);
          }
        case 181: break;
        case 64: 
          { return specifier(CTokenType.LONG);
          }
        case 182: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return token    (CTokenType.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
